---
layout: post
title:  "Tools manuals"
date:   2020-05-31 1:29:30 +0900
---
Crea algo unico y el mundo querra conocerlo.
El enemigo de la vida no es la muerte, es el desaprovechamiento.
La felicidad es una bola de luz, cubierta por una torre de mantas.

# Git
## Branching
https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging
https://qiita.com/seri1234/items/e651b3e108a695a92809

## Basic explanation about branching in GIT
https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging

## Add new repository, add files, commit and push (The repo needs to be created in github.com)
```
$ git init
$ git remote add origin https://github.com/<yourusername>/<reponame>.git
$ touch README.md
$ git add README.md
$ git config --global user.email "<youremailaccount>"
$ git config --global user.name "<yourname>"
$ git commit -m "first commit"
$ git push origin master
```

## Basic commands
Create new branch
```
$ git branch issue_1
```
Move to branch (shift files)
```
$ git checkout issue_1
```

Check status
```
$ git status
```

Add files to commit
```
$ git add main.html
$ git add webui.js
```

Check status
```
$ git status
```

Commit files to local repository
```
$ git commit -m "Devel: #1 Add video player for self camera"
```

Check status
```
$ git status
```

```
Commit files to remote repository
$ git push origin issue_1
```

Move to branch
```
$ git checkout master
```

Show difference between current files and last commit
```
$ git diff @^
```

List commit files
```
$ git show --name-only --oneline HEAD
```

# ROS

## ROS Robotics By Example (Including ROS installation)
https://subscription.packtpub.com/book/hardware_and_creative/9781782175193/1

## Installing ROS
http://wiki.ros.org/Installation/Source
https://neverbenever.wordpress.com/2017/12/20/install-ros-and-opencv-in-raspberry-piraspbian-stretch/
https://asukiaaa.blogspot.com/2018/06/raspberry-pi-raspbianstretchrosmelodic.html

## Installing ROS with own C++ package
https://camp.isaax.io/ja/tips-ja/raspberrypi3-ros-melodic-morenia#pubsub

## Robot server-client application (1- Simple motors 2- Husarion Robot)
https://qiita.com/mylabosango/items/944c04100a1ff5edeed8
https://medium.com/husarion-blog/bootstrap-4-ros-creating-a-web-ui-for-your-robot-9a77a8e373f9

## Create own URDF file (robot model)
http://wiki.ros.org/urdf/Tutorials

## ROSBRIDGE with webserver and ROSLIBJS (Last two includes chat example)
https://github.com/ryuichiueda/robosys2017/blob/master/13.md
http://wiki.ros.org/roslibjs/Tutorials/BasicRosFunctionality
https://qiita.com/srs/items/d3ec9962f7814d7b16f5
https://qiita.com/yoneken/items/7e45ad3fcf8010ed98ed

## Installation steps
Create root folder and source folder
```
$ sudo mkdir -p /amidachi/catkin_ws/src
$ cd catkin_ws/src/
```
Add ros repository and install catkin tools
```
$ sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu `lsb_release -sc` main" > /etc/apt/sources.list.d/ros-latest.list'
$ wget http://packages.ros.org/ros.key -O - | sudo apt-key add -
$ sudo apt-get update
$ sudo apt-get install python-catkin-tools
 ```

Install ros libraries
```
$ sudo apt install -y python-rosinstall-generator python-wstool python-rosinstall python-empy build-essential cmake
##$ sudo apt install python-rosdep
```

Initialize rosdep
```
##$ sudo rosdep init
##$ rosdep update
```

Increase swap memory before installing (I increased to 500Mb)
```
$ sudo vim /etc/dphys-swapfile
$ sudo /etc/init.d/dphys-swapfile stop
$ sudo /etc/init.d/dphys-swapfile start
```

Generate file with a list of libraries, download libraries in src, and resolve their dependencies.
```
$ sudo rosinstall_generator desktop --rosdistro melodic --deps --tar > ~/melodic-desktop
$ sudo mv ~/melodic-desktop /amidachi/catkin_ws/melodic-desktop.rosinstall
$ cd /amidachi/catkin_ws/
$ sudo wstool init -j2 src melodic-desktop.rosinstall
##$ rosdep install --from-paths src --ignore-src --rosdistro melodic -y
```

Download rosbridge_suite (which includes rosbridge_server) and rosauth, and resolve dependencies.
```
$ cd src/
$ sudo git clone https://github.com/RobotWebTools/rosbridge_suite.git
$ sudo git clone https://github.com/GT-RAIL/rosauth.git
$ cd ..
##$ rosdep install --from-paths src --ignore-src --rosdistro melodic -r -y
```

Build the libraries and run the server to check it works
```
$ sudo ./src/catkin/bin/catkin_make_isolated -j1 --install --source src -DCMAKE_BUILD_TYPE=Release
$ source devel_isolated/setup.bash
$ roscore
```

## Add ROS webserver
Create own package "robot_gui_bridge", add the package files and include the files in CMakeLists.txt
```
$ sudo catkin_create_pkg robot_gui_bridge rosbridge_server --rosdistro melodic
$ cd robot_gui_bridge/
$ sudo mkdir launch
$ sudo touch launch/websocket.launch
$ sudo vim launch/websocket.launch
$ sudo mkdir scripts
$ sudo vim scripts/webserver.py
$ sudo vim scripts/gui.html
$ sudo chmod 755 CMakeLists.txt
$ sudo vim CMakeLists.txt
$ sudo chmod 644 CMakeLists.txt
```

Build again the libraries and run the server to check it works
```
$ sudo ./src/catkin/bin/catkin_make_isolated -j1 --install --source src -DCMAKE_BUILD_TYPE=Release
$ source devel_isolated/setup.bash
$ roslaunch robot_gui_bridge websocket.launch
```

When file are correctly included and built, they should be listed in this file
```
$ vim build_isolated/robot_gui_bridge/install_manifest.txt
```

## How to compile only one library? (Usually the building stops and I just one to re-run the fail for error checking) 
Example: What if you need to compile one package?
```
$ cd /amidachi/catkin_ws/build_isolated/roscpp
$ sudo /amidachi/catkin_ws/install_isolated/env.sh make -j1
```

## How to startup at boot
https://blog.roverrobotics.com/how-to-run-ros-on-startup-bootup/

Configure the settings of the services to run
```
vim /etc/systemd/system/roscore.service
vim /etc/ros/env.sh
vim /etc/systemd/system/roslaunch.service
vim /usr/sbin/roslaunch
```
Enable the service
```
$ sudo systemctl enable roscore.service
$ sudo systemctl enable roslaunch.service
$ sudo chmod +x /usr/sbin/roslaunch
```

## Add audio support (audio_commons)
http://wiki.ros.org/audio_common/Tutorials/Streaming%20audio
http://wiki.ros.org/audio_common/Tutorials/Remotely%20listening%20through%20robot%20ears
https://wiki.audacityteam.org/wiki/USB_mic_on_Linux
```
$ cd /amidachi/catkin_ws/src
$ sudo git clone https://github.com/ros-drivers/audio_common.git
$ cd /amidachi/catkin_ws/
$ sudo ./src/catkin/bin/catkin_make_isolated -j1 --install --source src -DCMAKE_BUILD_TYPE=Release
```

Start capturing audio data using the following command (This will produce an /audio topic).
$ roslaunch audio_capture capture.launch

Check to see if it is streaming any data:
$ rostopic hz /audio

Test: Acquire audio data from the mic and forward them to the headphones:
$ gst-launch-0.10 alsasrc device=hw:1,0 ! audioconvert ! audioresample ! alsasink

## Setup usb-microphone
To see if the microphone is detected, do:
$ cat /proc/bus/usb/devices

To see if the USB-microphone is detected and installed, try:
$ cat /proc/asound/cards

Setting default recording device
Editing ~/.asoundrc and putting this snippet below might work for some:

 pcm.!default {
         type asym
         playback.pcm {
                 type plug
                 slave.pcm "hw:0,0"
         }
         capture.pcm {
                 type plug
                 slave.pcm "hw:1,0"
         } 
 }
 
# OpenCV
## Main guide to Install OpenCV
https://qiita.com/takahiro_itazuri/items/a67dd3bb7f5f88ca9dd8

## Main guide to Uninstall old OpenCV
http://www.srccodes.com/p/article/56/uninstall-remove-opencv-raspberry-pi-jessie-debain-make-uninstall-open-source-computer-vision-opencvlib

## Other references
https://pimylifeup.com/raspberry-pi-opencv/
https://qiita.com/satsukiya/items/02ab5215404c61d90114

# Webserver Backend
## Flask
https://dividable.net/python/flask-python/

## HTTPS (SSL) "Server" using Python 3
https://gist.github.com/gnilchee/da85b495d4e932da91a3
https://gist.github.com/dergachev/7028596

## How to generate web SSL certificates
Just run the command below in your target directory (usually /etc/ssl/)
```
$ openssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -keyout key.pem -out cert.pem
```

# Webserver Frontend
## Use Media input: navigator.mediaDevices.getUserMedia(constraints);
https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia
https://qiita.com/massie_g/items/ecfc16018210441051b4

# OpenVPN
https://github.com/Nishida-Lab/TC2015/wiki/OpenVPN_ROS
https://www.atmarkit.co.jp/flinux/special/openvpn/openvpnc.html

```
$ sudo apt update
$ sudo apt upgrade
$ sudo apt install openvpn
$ ls /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz
$ sudo gunzip -c /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz > ~/server.conf
$ sudo mv server.conf /etc/openvpn/
```

Configure basic settings in server.conf and enable ip4 forwarding in sysctl.conf
```
$ sudo vim /etc/openvpn/server.conf
$ sudo vim /etc/sysctl.conf
$ echo 1 > /proc/sys/net/ipv4/ip_forward
$ sudo cp -r /usr/share/easy-rsa/ /etc/openvpn
```

Add the basic CSR information
```
$ sudo mkdir /etc/openvpn/easy-rsa/keys
$ vim /etc/openvpn/easy-rsa/vars
```

Maybe adjust here in case of version not found error (I do not remember if I did it)
```
$ vim /etc/openvpn/easy-rsa/whichopensslcnf
```

Create DH certificate (maybe not required)
```
$ cd /etc/openvpn/easy-rsa/
$ sudo openssl dhparam -out /etc/openvpn/dh2048.pem 2048
```

Build server certificates
```
$ sudo su -
# source ./vars
# ./clean-all
# cp /usr/share/doc/openvpn/examples/sample-keys/sample-ca/index.txt.attr keys/
# ./build-ca
# ./build-key-server server
# openvpn --genkey --secret /etc/openvpn/ta.key
```

Build client certificate
```
# source vars
# ./build-key client-papa
```

Package certificates into one file (Convenient for openvpn app)
```
# echo '<tls-auth>' >> /etc/openvpn/easy-rsa/keys/client.ovpn
# cat /etc/openvpn/ta.key >> /etc/openvpn/easy-rsa/keys/client.ovpn
# echo '</tls-auth>' >> /etc/openvpn/easy-rsa/keys/client.ovpn
# echo '<ca>' >> /etc/openvpn/easy-rsa/keys/client.ovpn
# cat /etc/openvpn/ca.crt >> /etc/openvpn/easy-rsa/keys/client.ovpn
# echo '</ca>' >> /etc/openvpn/easy-rsa/keys/client.ovpn
# echo '<cert>' >> /etc/openvpn/easy-rsa/keys/client.ovpn
# cat /etc/openvpn/easy-rsa/keys/client1.crt >> /etc/openvpn/easy-rsa/keys/client.ovpn
# echo '</cert>' >> /etc/openvpn/easy-rsa/keys/client.ovpn
# echo '<key>' >> /etc/openvpn/easy-rsa/keys/client.ovpn
# cat /etc/openvpn/easy-rsa/keys/client1.key >> /etc/openvpn/easy-rsa/keys/client.ovpn
# echo '</key>' >> /etc/openvpn/easy-rsa/keys/client.ovpn
# vim client.ovpn
```

Check status of openvpn and connections
```
# sudo tail -f /var/log/openvpn-status.log
# sudo tail -f /var/log/openvpn.log
```

# Android App: Android Studio & ROS

## A guide to Android app development for complete beginners
https://www.androidauthority.com/android-app-development-1128595/

## How to enable Developer Options on your Android device
https://www.androidauthority.com/enable-developer-options-569223/
https://forum.xda-developers.com/huawei-p20-pro/help/usb-debugging-t3780673

## ERROR: Failed to install the following Android SDK packages as some licences have not been accepted.
https://qiita.com/yamahei/items/499ef3d39b275b108ffe

## ERROR: Failed to recognize Japanese characthers in Android Studio
https://qiita.com/watanaby0/items/bc2459e03c81a4b708c7

## Change applicationid (name and company domain)
https://www.thecodecity.com/2016/08/how-to-change-complete-package-company-domain-android.html

## Change app name
Modify the rootProject.name in settings.bundle, and also res/values/strings.xml

## Change app icon
https://www.andruni.com/app-name-icon-android/

## Linking Android Studio to GIT
https://blog.codecamp.jp/programming-androidstudio-github

## Develop ROS app for Android
https://qiita.com/goodclues/items/40f7bf52fb74fa13190c
Modification:
Use this link for build.gradle (Top Level)
https://raw.githubusercontent.com/rosjava/android_core/kinetic/buildscript.gradle

Add this libraries in build.gradle (app) to solve errors, as suggested here (https://github.com/rosjava/android_core/issues/300)
```
implementation 'org.ros.android_core:android_core_components:0.4.0'
implementation 'org.ros.rosjava_messages:std_msgs:0.5.11'
implementation 'org.ros.rosjava_bootstrap:message_generation:[0.3, 0.4)'
```

Create Talker class with this code and import it in MainActivity.java
http://docs.ros.org/hydro/api/rosjava_core/html/Talker_8java_source.html

## To access the device camera and display video (Remember to go to smartphone settings and enable camera permissions)
https://qiita.com/zaburo/items/d9d07eb4d87d21308124
https://www.programing-style.com/android/android-api/android-surfaceview-video/

## Add audio support in Java
https://github.com/cloudspace/rosjava_audio_module/blob/master/rosjava_audio_module/src/main/java/com/cloudspace/rosjava_video/AudioSubscriber.java

# Tools
## X11VNC
https://homemadegarbage.com/mac-raspi3-x11vnc

## TightVNC (Disadvantage: You cannot access the actual home screen but you get a new screen)
https://homemadegarbage.com/mac-raspi3-vnc

## Touch-screen keyboard "Matchbox-keyboard": Failed to recognize characters
https://ssiscirine.moe.hm/?p=26202
